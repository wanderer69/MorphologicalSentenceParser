// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package morphological_parser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MorphologicalSentenceParserClient is the client API for MorphologicalSentenceParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MorphologicalSentenceParserClient interface {
	PutSentenceToParsing(ctx context.Context, in *PutSentenceToParsingRequest, opts ...grpc.CallOption) (*PutSentenceToParsingResponse, error)
	GetResultSentenceParsing(ctx context.Context, in *GetResultSentenceParsingRequest, opts ...grpc.CallOption) (*GetResultSentenceParsingResponse, error)
}

type morphologicalSentenceParserClient struct {
	cc grpc.ClientConnInterface
}

func NewMorphologicalSentenceParserClient(cc grpc.ClientConnInterface) MorphologicalSentenceParserClient {
	return &morphologicalSentenceParserClient{cc}
}

func (c *morphologicalSentenceParserClient) PutSentenceToParsing(ctx context.Context, in *PutSentenceToParsingRequest, opts ...grpc.CallOption) (*PutSentenceToParsingResponse, error) {
	out := new(PutSentenceToParsingResponse)
	err := c.cc.Invoke(ctx, "/MorphologicalSentenceParser.MorphologicalSentenceParser/PutSentenceToParsing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *morphologicalSentenceParserClient) GetResultSentenceParsing(ctx context.Context, in *GetResultSentenceParsingRequest, opts ...grpc.CallOption) (*GetResultSentenceParsingResponse, error) {
	out := new(GetResultSentenceParsingResponse)
	err := c.cc.Invoke(ctx, "/MorphologicalSentenceParser.MorphologicalSentenceParser/GetResultSentenceParsing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MorphologicalSentenceParserServer is the server API for MorphologicalSentenceParser service.
// All implementations must embed UnimplementedMorphologicalSentenceParserServer
// for forward compatibility
type MorphologicalSentenceParserServer interface {
	PutSentenceToParsing(context.Context, *PutSentenceToParsingRequest) (*PutSentenceToParsingResponse, error)
	GetResultSentenceParsing(context.Context, *GetResultSentenceParsingRequest) (*GetResultSentenceParsingResponse, error)
	mustEmbedUnimplementedMorphologicalSentenceParserServer()
}

// UnimplementedMorphologicalSentenceParserServer must be embedded to have forward compatible implementations.
type UnimplementedMorphologicalSentenceParserServer struct {
}

func (UnimplementedMorphologicalSentenceParserServer) PutSentenceToParsing(context.Context, *PutSentenceToParsingRequest) (*PutSentenceToParsingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSentenceToParsing not implemented")
}
func (UnimplementedMorphologicalSentenceParserServer) GetResultSentenceParsing(context.Context, *GetResultSentenceParsingRequest) (*GetResultSentenceParsingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultSentenceParsing not implemented")
}
func (UnimplementedMorphologicalSentenceParserServer) mustEmbedUnimplementedMorphologicalSentenceParserServer() {
}

// UnsafeMorphologicalSentenceParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MorphologicalSentenceParserServer will
// result in compilation errors.
type UnsafeMorphologicalSentenceParserServer interface {
	mustEmbedUnimplementedMorphologicalSentenceParserServer()
}

func RegisterMorphologicalSentenceParserServer(s grpc.ServiceRegistrar, srv MorphologicalSentenceParserServer) {
	s.RegisterService(&MorphologicalSentenceParser_ServiceDesc, srv)
}

func _MorphologicalSentenceParser_PutSentenceToParsing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutSentenceToParsingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MorphologicalSentenceParserServer).PutSentenceToParsing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MorphologicalSentenceParser.MorphologicalSentenceParser/PutSentenceToParsing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MorphologicalSentenceParserServer).PutSentenceToParsing(ctx, req.(*PutSentenceToParsingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MorphologicalSentenceParser_GetResultSentenceParsing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultSentenceParsingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MorphologicalSentenceParserServer).GetResultSentenceParsing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MorphologicalSentenceParser.MorphologicalSentenceParser/GetResultSentenceParsing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MorphologicalSentenceParserServer).GetResultSentenceParsing(ctx, req.(*GetResultSentenceParsingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MorphologicalSentenceParser_ServiceDesc is the grpc.ServiceDesc for MorphologicalSentenceParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MorphologicalSentenceParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MorphologicalSentenceParser.MorphologicalSentenceParser",
	HandlerType: (*MorphologicalSentenceParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutSentenceToParsing",
			Handler:    _MorphologicalSentenceParser_PutSentenceToParsing_Handler,
		},
		{
			MethodName: "GetResultSentenceParsing",
			Handler:    _MorphologicalSentenceParser_GetResultSentenceParsing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "morphological_sentense_parser.proto",
}
