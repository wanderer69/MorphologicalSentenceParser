// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.12
// source: morphological_sentense_parser.proto

package morphological_parser

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PutSentenceToParsingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Sentence string `protobuf:"bytes,2,opt,name=sentence,proto3" json:"sentence,omitempty"`
}

func (x *PutSentenceToParsingRequest) Reset() {
	*x = PutSentenceToParsingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphological_sentense_parser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutSentenceToParsingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutSentenceToParsingRequest) ProtoMessage() {}

func (x *PutSentenceToParsingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_morphological_sentense_parser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutSentenceToParsingRequest.ProtoReflect.Descriptor instead.
func (*PutSentenceToParsingRequest) Descriptor() ([]byte, []int) {
	return file_morphological_sentense_parser_proto_rawDescGZIP(), []int{0}
}

func (x *PutSentenceToParsingRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PutSentenceToParsingRequest) GetSentence() string {
	if x != nil {
		return x.Sentence
	}
	return ""
}

type PutSentenceToParsingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TaskId   string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *PutSentenceToParsingResponse) Reset() {
	*x = PutSentenceToParsingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphological_sentense_parser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutSentenceToParsingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutSentenceToParsingResponse) ProtoMessage() {}

func (x *PutSentenceToParsingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_morphological_sentense_parser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutSentenceToParsingResponse.ProtoReflect.Descriptor instead.
func (*PutSentenceToParsingResponse) Descriptor() ([]byte, []int) {
	return file_morphological_sentense_parser_proto_rawDescGZIP(), []int{1}
}

func (x *PutSentenceToParsingResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PutSentenceToParsingResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetResultSentenceParsingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *GetResultSentenceParsingRequest) Reset() {
	*x = GetResultSentenceParsingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphological_sentense_parser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultSentenceParsingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultSentenceParsingRequest) ProtoMessage() {}

func (x *GetResultSentenceParsingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_morphological_sentense_parser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultSentenceParsingRequest.ProtoReflect.Descriptor instead.
func (*GetResultSentenceParsingRequest) Descriptor() ([]byte, []int) {
	return file_morphological_sentense_parser_proto_rawDescGZIP(), []int{2}
}

func (x *GetResultSentenceParsingRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetResultSentenceParsingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId                string                          `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TranslateSentenceResult []*TranslateSentensesResultItem `protobuf:"bytes,2,rep,name=translate_sentence_result,json=translateSentenceResult,proto3" json:"translate_sentence_result,omitempty"`
	Result                  string                          `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetResultSentenceParsingResponse) Reset() {
	*x = GetResultSentenceParsingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphological_sentense_parser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultSentenceParsingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultSentenceParsingResponse) ProtoMessage() {}

func (x *GetResultSentenceParsingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_morphological_sentense_parser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultSentenceParsingResponse.ProtoReflect.Descriptor instead.
func (*GetResultSentenceParsingResponse) Descriptor() ([]byte, []int) {
	return file_morphological_sentense_parser_proto_rawDescGZIP(), []int{3}
}

func (x *GetResultSentenceParsingResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetResultSentenceParsingResponse) GetTranslateSentenceResult() []*TranslateSentensesResultItem {
	if x != nil {
		return x.TranslateSentenceResult
	}
	return nil
}

func (x *GetResultSentenceParsingResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type WordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rel      string            `protobuf:"bytes,1,opt,name=Rel,proto3" json:"Rel,omitempty"`
	Pos      string            `protobuf:"bytes,2,opt,name=Pos,proto3" json:"Pos,omitempty"`
	Feats    map[string]string `protobuf:"bytes,3,rep,name=Feats,proto3" json:"Feats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Start    string            `protobuf:"bytes,4,opt,name=Start,proto3" json:"Start,omitempty"`
	Stop     string            `protobuf:"bytes,5,opt,name=Stop,proto3" json:"Stop,omitempty"`
	Text     string            `protobuf:"bytes,6,opt,name=Text,proto3" json:"Text,omitempty"`
	Lemma    string            `protobuf:"bytes,7,opt,name=Lemma,proto3" json:"Lemma,omitempty"`
	Id       string            `protobuf:"bytes,8,opt,name=Id,proto3" json:"Id,omitempty"`
	HeadId   string            `protobuf:"bytes,9,opt,name=Head_id,json=HeadId,proto3" json:"Head_id,omitempty"`
	IdN      int32             `protobuf:"varint,10,opt,name=IdN,proto3" json:"IdN,omitempty"`
	SidN     int32             `protobuf:"varint,11,opt,name=SidN,proto3" json:"SidN,omitempty"`
	HeadIdN  int32             `protobuf:"varint,12,opt,name=HeadIdN,proto3" json:"HeadIdN,omitempty"`
	SheadIdN int32             `protobuf:"varint,13,opt,name=SheadIdN,proto3" json:"SheadIdN,omitempty"`
}

func (x *WordData) Reset() {
	*x = WordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphological_sentense_parser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordData) ProtoMessage() {}

func (x *WordData) ProtoReflect() protoreflect.Message {
	mi := &file_morphological_sentense_parser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordData.ProtoReflect.Descriptor instead.
func (*WordData) Descriptor() ([]byte, []int) {
	return file_morphological_sentense_parser_proto_rawDescGZIP(), []int{4}
}

func (x *WordData) GetRel() string {
	if x != nil {
		return x.Rel
	}
	return ""
}

func (x *WordData) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

func (x *WordData) GetFeats() map[string]string {
	if x != nil {
		return x.Feats
	}
	return nil
}

func (x *WordData) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *WordData) GetStop() string {
	if x != nil {
		return x.Stop
	}
	return ""
}

func (x *WordData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *WordData) GetLemma() string {
	if x != nil {
		return x.Lemma
	}
	return ""
}

func (x *WordData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WordData) GetHeadId() string {
	if x != nil {
		return x.HeadId
	}
	return ""
}

func (x *WordData) GetIdN() int32 {
	if x != nil {
		return x.IdN
	}
	return 0
}

func (x *WordData) GetSidN() int32 {
	if x != nil {
		return x.SidN
	}
	return 0
}

func (x *WordData) GetHeadIdN() int32 {
	if x != nil {
		return x.HeadIdN
	}
	return 0
}

func (x *WordData) GetSheadIdN() int32 {
	if x != nil {
		return x.SheadIdN
	}
	return 0
}

type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	ValuePtr string `protobuf:"bytes,3,opt,name=ValuePtr,proto3" json:"ValuePtr,omitempty"`  // предлог
	Value    string `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`        // значение
	Relation int32  `protobuf:"varint,5,opt,name=Relation,proto3" json:"Relation,omitempty"` // связь
	WordNum  int32  `protobuf:"varint,6,opt,name=WordNum,proto3" json:"WordNum,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphological_sentense_parser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_morphological_sentense_parser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_morphological_sentense_parser_proto_rawDescGZIP(), []int{5}
}

func (x *Relation) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Relation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Relation) GetValuePtr() string {
	if x != nil {
		return x.ValuePtr
	}
	return ""
}

func (x *Relation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Relation) GetRelation() int32 {
	if x != nil {
		return x.Relation
	}
	return 0
}

func (x *Relation) GetWordNum() int32 {
	if x != nil {
		return x.WordNum
	}
	return 0
}

type TranslateSentensesResultItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sentence  string      `protobuf:"bytes,1,opt,name=Sentence,proto3" json:"Sentence,omitempty"`
	WordDatas []*WordData `protobuf:"bytes,2,rep,name=WordDatas,proto3" json:"WordDatas,omitempty"`
	Relations []*Relation `protobuf:"bytes,3,rep,name=Relations,proto3" json:"Relations,omitempty"`
}

func (x *TranslateSentensesResultItem) Reset() {
	*x = TranslateSentensesResultItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphological_sentense_parser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateSentensesResultItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateSentensesResultItem) ProtoMessage() {}

func (x *TranslateSentensesResultItem) ProtoReflect() protoreflect.Message {
	mi := &file_morphological_sentense_parser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateSentensesResultItem.ProtoReflect.Descriptor instead.
func (*TranslateSentensesResultItem) Descriptor() ([]byte, []int) {
	return file_morphological_sentense_parser_proto_rawDescGZIP(), []int{6}
}

func (x *TranslateSentensesResultItem) GetSentence() string {
	if x != nil {
		return x.Sentence
	}
	return ""
}

func (x *TranslateSentensesResultItem) GetWordDatas() []*WordData {
	if x != nil {
		return x.WordDatas
	}
	return nil
}

func (x *TranslateSentensesResultItem) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

var File_morphological_sentense_parser_proto protoreflect.FileDescriptor

var file_morphological_sentense_parser_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x22, 0x56, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x54, 0x0a, 0x1c, 0x50, 0x75,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x73, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x3a, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x75,
	0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x17, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x89, 0x03,
	0x0a, 0x08, 0x57, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x52, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x46,
	0x0a, 0x05, 0x46, 0x65, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x46, 0x65, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x6d, 0x6d, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65, 0x6d, 0x6d, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x4e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x49, 0x64, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x4e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x64, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x4e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x49, 0x64, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x68, 0x65, 0x61, 0x64, 0x49, 0x64, 0x4e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x68, 0x65, 0x61, 0x64, 0x49, 0x64, 0x4e, 0x1a,
	0x38, 0x0a, 0x0a, 0x46, 0x65, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x6f, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x22, 0xc4, 0x01, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x57, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x57, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xc9, 0x02, 0x0a, 0x1b, 0x4d, 0x6f,
	0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x50, 0x75,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x73, 0x69,
	0x6e, 0x67, 0x12, 0x38, 0x2e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x50, 0x75, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x61,
	0x72, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x4d,
	0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x2e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6d,
	0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_morphological_sentense_parser_proto_rawDescOnce sync.Once
	file_morphological_sentense_parser_proto_rawDescData = file_morphological_sentense_parser_proto_rawDesc
)

func file_morphological_sentense_parser_proto_rawDescGZIP() []byte {
	file_morphological_sentense_parser_proto_rawDescOnce.Do(func() {
		file_morphological_sentense_parser_proto_rawDescData = protoimpl.X.CompressGZIP(file_morphological_sentense_parser_proto_rawDescData)
	})
	return file_morphological_sentense_parser_proto_rawDescData
}

var file_morphological_sentense_parser_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_morphological_sentense_parser_proto_goTypes = []interface{}{
	(*PutSentenceToParsingRequest)(nil),      // 0: MorphologicalSentenceParser.PutSentenceToParsingRequest
	(*PutSentenceToParsingResponse)(nil),     // 1: MorphologicalSentenceParser.PutSentenceToParsingResponse
	(*GetResultSentenceParsingRequest)(nil),  // 2: MorphologicalSentenceParser.GetResultSentenceParsingRequest
	(*GetResultSentenceParsingResponse)(nil), // 3: MorphologicalSentenceParser.GetResultSentenceParsingResponse
	(*WordData)(nil),                         // 4: MorphologicalSentenceParser.WordData
	(*Relation)(nil),                         // 5: MorphologicalSentenceParser.Relation
	(*TranslateSentensesResultItem)(nil),     // 6: MorphologicalSentenceParser.TranslateSentensesResultItem
	nil,                                      // 7: MorphologicalSentenceParser.WordData.FeatsEntry
}
var file_morphological_sentense_parser_proto_depIdxs = []int32{
	6, // 0: MorphologicalSentenceParser.GetResultSentenceParsingResponse.translate_sentence_result:type_name -> MorphologicalSentenceParser.TranslateSentensesResultItem
	7, // 1: MorphologicalSentenceParser.WordData.Feats:type_name -> MorphologicalSentenceParser.WordData.FeatsEntry
	4, // 2: MorphologicalSentenceParser.TranslateSentensesResultItem.WordDatas:type_name -> MorphologicalSentenceParser.WordData
	5, // 3: MorphologicalSentenceParser.TranslateSentensesResultItem.Relations:type_name -> MorphologicalSentenceParser.Relation
	0, // 4: MorphologicalSentenceParser.MorphologicalSentenceParser.PutSentenceToParsing:input_type -> MorphologicalSentenceParser.PutSentenceToParsingRequest
	2, // 5: MorphologicalSentenceParser.MorphologicalSentenceParser.GetResultSentenceParsing:input_type -> MorphologicalSentenceParser.GetResultSentenceParsingRequest
	1, // 6: MorphologicalSentenceParser.MorphologicalSentenceParser.PutSentenceToParsing:output_type -> MorphologicalSentenceParser.PutSentenceToParsingResponse
	3, // 7: MorphologicalSentenceParser.MorphologicalSentenceParser.GetResultSentenceParsing:output_type -> MorphologicalSentenceParser.GetResultSentenceParsingResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_morphological_sentense_parser_proto_init() }
func file_morphological_sentense_parser_proto_init() {
	if File_morphological_sentense_parser_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_morphological_sentense_parser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutSentenceToParsingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphological_sentense_parser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutSentenceToParsingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphological_sentense_parser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultSentenceParsingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphological_sentense_parser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultSentenceParsingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphological_sentense_parser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphological_sentense_parser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphological_sentense_parser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateSentensesResultItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_morphological_sentense_parser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_morphological_sentense_parser_proto_goTypes,
		DependencyIndexes: file_morphological_sentense_parser_proto_depIdxs,
		MessageInfos:      file_morphological_sentense_parser_proto_msgTypes,
	}.Build()
	File_morphological_sentense_parser_proto = out.File
	file_morphological_sentense_parser_proto_rawDesc = nil
	file_morphological_sentense_parser_proto_goTypes = nil
	file_morphological_sentense_parser_proto_depIdxs = nil
}
